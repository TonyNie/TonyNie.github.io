<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凡云的博客 (文章分类：System Call)</title><link>http://blog.runxcode.com/</link><description></description><atom:link href="http://blog.runxcode.com/categories/system-call.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Tue, 05 Sep 2017 07:35:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>从一个死锁问题说起</title><link>http://blog.runxcode.com/posts/talking-from-dead-lock.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;碰到一个死锁问题，A 进程一直持有锁。&lt;/p&gt;
&lt;p&gt;加锁和解锁代码如下：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-1"&gt;&lt;/a&gt;fd = open(PATH, O_RDRW);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-2"&gt;&lt;/a&gt;if (fd &amp;lt; 0)
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-3"&gt;&lt;/a&gt;        goto out;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-4"&gt;&lt;/a&gt;ret = flock(fd, LOCK_SH);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-5"&gt;&lt;/a&gt;if (ret &amp;lt; 0)
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-6"&gt;&lt;/a&gt;        goto out;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-8"&gt;&lt;/a&gt;/* do something */
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-10"&gt;&lt;/a&gt;out:
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-11"&gt;&lt;/a&gt;        if (fd &amp;gt; 0) {
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-12"&gt;&lt;/a&gt;                flock(fd, LOCK_UN);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-13"&gt;&lt;/a&gt;                close(fd);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-14"&gt;&lt;/a&gt;        }
&lt;/pre&gt;&lt;p&gt;追送代码发现，出现了加锁而没有释放锁的情况；唯一的可能性就是 fd &amp;gt; 0 不成立。
但加锁成功，说明 fd 不会小于 0；所以 fd == 0.&lt;/p&gt;
&lt;p&gt;为什么？ fd 是由系统调用 open 返回的，通常情况是 &amp;gt; 0 的；内核根据进程打开文件的记录返回没有使用的
值；如果 fd 为 0，说明之前 0 是空着的；但我们知道 0 通常代表着 标准输入，可能情况就是有人把标注输入
close 掉了。daemon 程序通常会将 0， 1，2 重新定向于 /dev/null, 但我们并没有这样处理。
通过 proc 文件系统查看 fd 的使用情况。&lt;/p&gt;
&lt;p&gt;正常情况：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-1"&gt;&lt;/a&gt;# ls -lh /proc/1845/fd/*
&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-2"&gt;&lt;/a&gt;lr-x------    1 root     root          64 Oct 25 17:50 1845/fd/0 -&amp;gt; /var/console
&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-3"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/1 -&amp;gt; /dev/console
&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-4"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/2 -&amp;gt; /dev/console
&lt;/pre&gt;&lt;p&gt;异常情况：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_755cb63e00284310987b304a56173740-1"&gt;&lt;/a&gt;# ls -lh /proc/1845/fd/*
&lt;a name="rest_code_755cb63e00284310987b304a56173740-2"&gt;&lt;/a&gt;lr-x------    1 root     root          64 Oct 25 17:50 1845/fd/0 -&amp;gt; /var/conf/myfile
&lt;a name="rest_code_755cb63e00284310987b304a56173740-3"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/1 -&amp;gt; /dev/console
&lt;a name="rest_code_755cb63e00284310987b304a56173740-4"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/2 -&amp;gt; /dev/console
&lt;/pre&gt;&lt;p&gt;很明显标准输入被 close 了，然后进程重新 open 文件时就得到了值为 0 的 fd.&lt;/p&gt;
&lt;p&gt;谁关闭了标准输入？ 为什么？&lt;/p&gt;
&lt;p&gt;有了方向很快就查到了元凶。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们知道 Linux 同时支持 POSIX 标准 和 System V 标准的 IPC 机制。 项目中使用了 Message queue 的 IPC 方法，但我们混用了两种机制；在获取 IPC handle 的时候使用了 System V 标准(msgget)；但释放 IPC handle 的时候使用了 POSIX 标准 (mq_close). 问题是 msgget 的拿到的值有很大概率为 0；mq_close(0) 会将 0 号 fd close 掉，导致 0 号 fd 重新进入了分配池。&lt;/strong&gt;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;两点结论:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;系统调用 open/create 的返回值是有可能为 0 的&lt;/li&gt;
&lt;li&gt;POSIX 标准和 System V 标准的 系统调用不能混合使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>System Call</category><category>UNIX</category><guid>http://blog.runxcode.com/posts/talking-from-dead-lock.html</guid><pubDate>Tue, 25 Oct 2016 10:28:11 GMT</pubDate></item></channel></rss>