<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凡云的博客 (关于文章 UNIX)</title><link>http://blog.cloudnie.ort/</link><description></description><atom:link href="http://blog.cloudnie.ort/categories/unix.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Sun, 23 Apr 2023 13:40:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>从一个死锁问题说起</title><link>http://blog.cloudnie.ort/posts/talking-from-dead-lock/</link><dc:creator>CloudNie</dc:creator><description>&lt;p&gt;碰到一个死锁问题，A 进程一直持有锁。&lt;/p&gt;
&lt;p&gt;加锁和解锁代码如下：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-1" name="rest_code_7d45990d744641688d8f0cd129180e69-1" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-1"&gt;&lt;/a&gt;fd = open(PATH, O_RDRW);
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-2" name="rest_code_7d45990d744641688d8f0cd129180e69-2" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-2"&gt;&lt;/a&gt;if (fd &amp;lt; 0)
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-3" name="rest_code_7d45990d744641688d8f0cd129180e69-3" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-3"&gt;&lt;/a&gt;        goto out;
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-4" name="rest_code_7d45990d744641688d8f0cd129180e69-4" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-4"&gt;&lt;/a&gt;ret = flock(fd, LOCK_SH);
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-5" name="rest_code_7d45990d744641688d8f0cd129180e69-5" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-5"&gt;&lt;/a&gt;if (ret &amp;lt; 0)
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-6" name="rest_code_7d45990d744641688d8f0cd129180e69-6" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-6"&gt;&lt;/a&gt;        goto out;
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-7" name="rest_code_7d45990d744641688d8f0cd129180e69-7" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-8" name="rest_code_7d45990d744641688d8f0cd129180e69-8" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-8"&gt;&lt;/a&gt;/* do something */
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-9" name="rest_code_7d45990d744641688d8f0cd129180e69-9" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-10" name="rest_code_7d45990d744641688d8f0cd129180e69-10" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-10"&gt;&lt;/a&gt;out:
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-11" name="rest_code_7d45990d744641688d8f0cd129180e69-11" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-11"&gt;&lt;/a&gt;        if (fd &amp;gt; 0) {
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-12" name="rest_code_7d45990d744641688d8f0cd129180e69-12" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-12"&gt;&lt;/a&gt;                flock(fd, LOCK_UN);
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-13" name="rest_code_7d45990d744641688d8f0cd129180e69-13" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-13"&gt;&lt;/a&gt;                close(fd);
&lt;a id="rest_code_7d45990d744641688d8f0cd129180e69-14" name="rest_code_7d45990d744641688d8f0cd129180e69-14" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_7d45990d744641688d8f0cd129180e69-14"&gt;&lt;/a&gt;        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;追送代码发现，出现了加锁而没有释放锁的情况；唯一的可能性就是 fd &amp;gt; 0 不成立。
但加锁成功，说明 fd 不会小于 0；所以 fd == 0.&lt;/p&gt;
&lt;p&gt;为什么？ fd 是由系统调用 open 返回的，通常情况是 &amp;gt; 0 的；内核根据进程打开文件的记录返回没有使用的
值；如果 fd 为 0，说明之前 0 是空着的；但我们知道 0 通常代表着 标准输入，可能情况就是有人把标注输入
close 掉了。daemon 程序通常会将 0， 1，2 重新定向于 /dev/null, 但我们并没有这样处理。
通过 proc 文件系统查看 fd 的使用情况。&lt;/p&gt;
&lt;p&gt;正常情况：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_fb9083caba2944c9ac8ee89834b5e372-1" name="rest_code_fb9083caba2944c9ac8ee89834b5e372-1" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_fb9083caba2944c9ac8ee89834b5e372-1"&gt;&lt;/a&gt;# ls -lh /proc/1845/fd/*
&lt;a id="rest_code_fb9083caba2944c9ac8ee89834b5e372-2" name="rest_code_fb9083caba2944c9ac8ee89834b5e372-2" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_fb9083caba2944c9ac8ee89834b5e372-2"&gt;&lt;/a&gt;lr-x------    1 root     root          64 Oct 25 17:50 1845/fd/0 -&amp;gt; /var/console
&lt;a id="rest_code_fb9083caba2944c9ac8ee89834b5e372-3" name="rest_code_fb9083caba2944c9ac8ee89834b5e372-3" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_fb9083caba2944c9ac8ee89834b5e372-3"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/1 -&amp;gt; /dev/console
&lt;a id="rest_code_fb9083caba2944c9ac8ee89834b5e372-4" name="rest_code_fb9083caba2944c9ac8ee89834b5e372-4" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_fb9083caba2944c9ac8ee89834b5e372-4"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/2 -&amp;gt; /dev/console
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;异常情况：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_c9847aaa3fd0478da23243a62246eb90-1" name="rest_code_c9847aaa3fd0478da23243a62246eb90-1" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_c9847aaa3fd0478da23243a62246eb90-1"&gt;&lt;/a&gt;# ls -lh /proc/1845/fd/*
&lt;a id="rest_code_c9847aaa3fd0478da23243a62246eb90-2" name="rest_code_c9847aaa3fd0478da23243a62246eb90-2" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_c9847aaa3fd0478da23243a62246eb90-2"&gt;&lt;/a&gt;lr-x------    1 root     root          64 Oct 25 17:50 1845/fd/0 -&amp;gt; /var/conf/myfile
&lt;a id="rest_code_c9847aaa3fd0478da23243a62246eb90-3" name="rest_code_c9847aaa3fd0478da23243a62246eb90-3" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_c9847aaa3fd0478da23243a62246eb90-3"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/1 -&amp;gt; /dev/console
&lt;a id="rest_code_c9847aaa3fd0478da23243a62246eb90-4" name="rest_code_c9847aaa3fd0478da23243a62246eb90-4" href="http://blog.cloudnie.ort/posts/talking-from-dead-lock/#rest_code_c9847aaa3fd0478da23243a62246eb90-4"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/2 -&amp;gt; /dev/console
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显标准输入被 close 了，然后进程重新 open 文件时就得到了值为 0 的 fd.&lt;/p&gt;
&lt;p&gt;谁关闭了标准输入？ 为什么？&lt;/p&gt;
&lt;p&gt;有了方向很快就查到了元凶。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们知道 Linux 同时支持 POSIX 标准 和 System V 标准的 IPC 机制。 项目中使用了 Message queue 的 IPC 方法，但我们混用了两种机制；在获取 IPC handle 的时候使用了 System V 标准(msgget)；但释放 IPC handle 的时候使用了 POSIX 标准 (mq_close). 问题是 msgget 的拿到的值有很大概率为 0；mq_close(0) 会将 0 号 fd close 掉，导致 0 号 fd 重新进入了分配池。&lt;/strong&gt;&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;两点结论:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;系统调用 open/create 的返回值是有可能为 0 的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POSIX 标准和 System V 标准的 系统调用不能混合使用&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;</description><category>System Call</category><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/talking-from-dead-lock/</guid><pubDate>Tue, 25 Oct 2016 10:28:11 GMT</pubDate></item><item><title>FAT32 文件系统时间戳问题</title><link>http://blog.cloudnie.ort/posts/file-time-at-fat32/</link><dc:creator>CloudNie</dc:creator><description>&lt;p&gt;最近遇到一个文件创建时间显示异常问题。嵌入系统中 SD 的文件系统默认选择 vfat，
就是 FAT32；在嵌入式系统中查看文件的创建时间是正常的，但如果将 SD 卡插入到 PC 机
上面，无论是 Ubuntu 还是 Windows，文件的创建时间都会显示异常，比实际创建时间早8个小时。&lt;/p&gt;
&lt;p&gt;嵌入式系统上的时区为东8区（北京时间）；其他应用获取时间和日期都正常。开始怀疑是 vfat 的问题；
但在 Ubuntu 14.04 上测试没有遇到问题。&lt;/p&gt;
&lt;p&gt;有同事反应说他们之前也碰到过类似的问题，解决办法是调用 &lt;em&gt;settimeofday&lt;/em&gt; 时提供时区参数。&lt;/p&gt;
&lt;p&gt;查阅 settimeofday 的在线手册，发现有这样一段话：&lt;/p&gt;
&lt;p&gt;Under  Linux  there are some peculiar "warp clock" semantics associated with the settimeofday() system call if on the
very first call (after booting) that has a non-NULL tz argument, the tv argument is NULL and the tz_minuteswest field
is  nonzero.   (The tz_dsttime field should be zero for this case.)  In such a case it is assumed that the CMOS clock
is on local time, and that it has to be incremented by this amount to get UTC system time.  No doubt it is a bad idea
to use this feature&lt;/p&gt;
&lt;p&gt;查看内核中关于时间的代码，发现 CMOS Clock 存储的是本地时间；而内核对此一无所知。因此需要某种手段来告知内核。内核为此还
定义了一个全局的变量 &lt;em&gt;sys_tz&lt;/em&gt; 来记录时区信息。在呼叫 &lt;em&gt;settimeofday&lt;/em&gt; 时，如果时区参数不为空，内核就会修改 &lt;em&gt;sys_tz&lt;/em&gt; 变量。&lt;/p&gt;
&lt;p&gt;因此怀疑 FAT32 中记录的文件创建时间是 locale time，不是 UTC 时间。查阅 FAT32 的代码发现，在创建文件节点时，会呼叫
&lt;em&gt;fat_time_unix2fat&lt;/em&gt; 时将 UTC 时间转换为本地时间。在转换的过程中，使用了 &lt;em&gt;sys_tz&lt;/em&gt; 保存的时区信息或者
挂载文件系统时指定的时区信息。&lt;/p&gt;
&lt;p&gt;内核也建议在系统上电之后，应尽快设置 &lt;em&gt;sys_tz&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;解决方案：系统启动后，利用 &lt;em&gt;hwclock&lt;/em&gt; 设置内核的 &lt;em&gt;sys_tz&lt;/em&gt; 变量。&lt;/p&gt;</description><category>File System</category><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/file-time-at-fat32/</guid><pubDate>Wed, 27 Jul 2016 11:56:50 GMT</pubDate></item><item><title>inotify 失效问题</title><link>http://blog.cloudnie.ort/posts/inotify-and-sendfile/</link><dc:creator>CloudNie</dc:creator><description>&lt;p&gt;inotify 子系统可以用来监视文件系统，包括文件后者目录的创建，修改，删除等等。
但如果通过 sendfile 对文件作出修改，inotify 就会监测不到对应的事件。&lt;/p&gt;</description><category>IO</category><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/inotify-and-sendfile/</guid><pubDate>Thu, 03 Mar 2016 13:02:16 GMT</pubDate></item><item><title>Stable Ubuntu 14.04</title><link>http://blog.cloudnie.ort/posts/ubuntu/</link><dc:creator>CloudNie</dc:creator><description>&lt;p&gt;I find that my Ubuntu 14.04 had run 65 days without reboot.
That's good.&lt;/p&gt;
&lt;p&gt;$ uptime&lt;/p&gt;
&lt;p&gt;18:03:05 up 65 days, 8:40, 5 users, load average: 0.15, 0.12, 0.14&lt;/p&gt;</description><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/ubuntu/</guid><pubDate>Wed, 29 Jul 2015 12:19:23 GMT</pubDate></item><item><title>ftok 陷阱</title><link>http://blog.cloudnie.ort/posts/ftok/</link><dc:creator>CloudNie</dc:creator><description>&lt;p&gt;最近手上的项目出现了一个很严重的bug, 系统的message queue 资源被消耗完毕; 在创建 message queue
时提示已超出系统的资源限制(ENOSPC); 通过msgctl 查看系统上的 message queue 数目, 的确超出了系统的
限制(&lt;em&gt;/proc/sys/kernel/msgmni&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;System IPC (message queue, share memory 等等) 在创建时, 必须指定一个 KEY 值, 这个 KEY 来自于 ftok.&lt;/p&gt;
&lt;p&gt;debug 发现, 调用ftok产生的 KEY, 每次都不一样.&lt;/p&gt;
&lt;p&gt;查看fotk的 source code(glibc 2.20)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-1" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-1" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-1"&gt;&lt;/a&gt;key_t ftok (const char *pathname, int proj_id) {
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-2" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-2" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-2"&gt;&lt;/a&gt;        struct stat64 st;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-3" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-3" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-3"&gt;&lt;/a&gt;        key_t key;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-4" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-4" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-5" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-5" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-5"&gt;&lt;/a&gt;        if (__xstat64 (_STAT_VER, pathname, &amp;amp;st) &amp;lt; 0)
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-6" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-6" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-6"&gt;&lt;/a&gt;                return (key_t) -1;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-7" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-7" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-8" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-8" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-8"&gt;&lt;/a&gt;        key = ((st.st_ino &amp;amp; 0xffff) | ((st.st_dev &amp;amp; 0xff) &amp;lt;&amp;lt; 16)
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-9" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-9" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-9"&gt;&lt;/a&gt;                | ((proj_id &amp;amp; 0xff) &amp;lt;&amp;lt; 24));
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-10" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-10" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-11" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-11" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-11"&gt;&lt;/a&gt;        return key;
&lt;a id="rest_code_22ed7ddeb6b642598f8266561926e6aa-12" name="rest_code_22ed7ddeb6b642598f8266561926e6aa-12" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_22ed7ddeb6b642598f8266561926e6aa-12"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样看, KEY 值与文件系统所在的 device id 和 文件节点号 有关, 如果 &lt;em&gt;pathname&lt;/em&gt; 没有被删除, 则key值应该维持不变.&lt;/p&gt;
&lt;p&gt;最终发现, &lt;em&gt;pathname&lt;/em&gt; 在出错处理时被删除, 从而导致 KEY 值不固定.&lt;/p&gt;
&lt;p&gt;实验发现, 如果 &lt;em&gt;pathname&lt;/em&gt; 位于真实的文件系统, 比如EXT4, 删除后重新创建 &lt;em&gt;pathname&lt;/em&gt; , &lt;em&gt;st_ino&lt;/em&gt; 和 &lt;em&gt;st_dev&lt;/em&gt; 不一定发生变化;
但如果 &lt;em&gt;pathname&lt;/em&gt; 位于 ramfs 或者 tmpfs, 删除后重新创建, &lt;em&gt;st_ino&lt;/em&gt; 一定会改变. 所以, &lt;em&gt;pathname&lt;/em&gt; 所在的文件系统可能会影响
KEY 的产生. (笔者所在的项目中, &lt;em&gt;pathname&lt;/em&gt; 位于 ramfs)&lt;/p&gt;
&lt;p&gt;另外, 在 glibc 2.20 的 ftok 实现中, 只是使用了inode number 的低 16 位, 如果文件系统中包含大量的文件, 就会存在两个文件的 inode_number
低 16 位 相同; 此时, 这两个文件对应的 KEY 值 就会相同, 违背了 不同的文件产生不同的 KEY 的原则.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Linux programmer's Manual&lt;/em&gt; 是这样说的:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_3637e913ff9b469aaac6529365fae76d-1" name="rest_code_3637e913ff9b469aaac6529365fae76d-1" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_3637e913ff9b469aaac6529365fae76d-1"&gt;&lt;/a&gt;Of course no guarantee can be given that the resulting key_t is unique.
&lt;a id="rest_code_3637e913ff9b469aaac6529365fae76d-2" name="rest_code_3637e913ff9b469aaac6529365fae76d-2" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_3637e913ff9b469aaac6529365fae76d-2"&gt;&lt;/a&gt;Typically, a best effort attempt combines the given proj_id byte,
&lt;a id="rest_code_3637e913ff9b469aaac6529365fae76d-3" name="rest_code_3637e913ff9b469aaac6529365fae76d-3" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_3637e913ff9b469aaac6529365fae76d-3"&gt;&lt;/a&gt;the lower 16  bits  of the inode number, and the lower 8 bits of
&lt;a id="rest_code_3637e913ff9b469aaac6529365fae76d-4" name="rest_code_3637e913ff9b469aaac6529365fae76d-4" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_3637e913ff9b469aaac6529365fae76d-4"&gt;&lt;/a&gt;the device number into a 32-bit result.  Collisions may easily happen,
&lt;a id="rest_code_3637e913ff9b469aaac6529365fae76d-5" name="rest_code_3637e913ff9b469aaac6529365fae76d-5" href="http://blog.cloudnie.ort/posts/ftok/#rest_code_3637e913ff9b469aaac6529365fae76d-5"&gt;&lt;/a&gt;for example between files on /dev/hda1 and files on /dev/sda1.
&lt;/pre&gt;&lt;/div&gt;</description><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/ftok/</guid><pubDate>Sat, 25 Apr 2015 11:41:13 GMT</pubDate></item><item><title>使用nikola生成静态博客</title><link>http://blog.cloudnie.ort/posts/write-blog-with-restructuredtext/</link><dc:creator>CloudNie</dc:creator><description>&lt;section id="section-1"&gt;
&lt;h2&gt;创建静态博客&lt;/h2&gt;
&lt;p&gt;使用WrodPress管理和编辑博客, 总觉得不顺手.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;有点大, 不利用备份&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不方便做版本控制&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有找到合适的编辑工具&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来有同事介绍用sphinx编辑spec. sphinx采用reStructuredText作为标记语言, 可以生成PDF, html等多种格式.
开始考虑是否可以用reStructuredText编辑内容, 然后利用sphinx生成html.尝试几个theme, 都不是太理想.&lt;/p&gt;
&lt;p&gt;学习sphinx的过程中, 偶尔发现一个网站介绍pelican和nikola. 尝试了nikola, 发现基本满足需求.
nikola提供了一个脚本可以将wordpress中的内容转换为reStructuredText格式, 随将博客迁移过来.&lt;/p&gt;
&lt;/section&gt;</description><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/write-blog-with-restructuredtext/</guid><pubDate>Tue, 02 Sep 2014 14:17:12 GMT</pubDate></item><item><title>利用回环设备实现NFS磁盘配额</title><link>http://blog.cloudnie.ort/posts/loopdev_and_NFS/</link><dc:creator>CloudNie</dc:creator><description>&lt;section id="nfs"&gt;
&lt;h2&gt;利用回环设备实现NFS磁盘配额&lt;/h2&gt;
&lt;p&gt;嵌入式系统软件开发过程中经常会使用NFS（网络文件系统）共享文件, 如果多人使用，可能需要做配额管理。quota 当然可以，但有点杀机焉用牛刀的感觉。利用unix的回环设备(loop device) 做配额管理，简单、方便，并且不需要对原来的物理文件系统做任何修改。当然，性能上会有损失（没有评估）。&lt;/p&gt;
&lt;p&gt;以Ubuntu12.04 为例， 配置过程如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;生成回环文件&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;sudo dd if=/dev/zero of=tony.img bs=1G count=10&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;&lt;p&gt;配置回环设备&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;sudo losetup /dev/loop1 ./tony.img&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;p&gt;建立文件系统&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;sudo mkfs.ext4 /dev/loop1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;p&gt;解除回环设备的映射&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;sudo losetup -d /dev/loop1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;&lt;p&gt;开机自动mount回环设备&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编辑 /etc/fstab, 添加新的一行&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/media/sda6/share/tony.img /media/sda6/share/tony ext4 loop, 0 0&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;挂载回环设备&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;sudo mount -a&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用df命令查看当前文件系统信息, 如过设备被正常挂载, 会有类似信息:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;/dev/loop0 10G  435M  9.1G   5% /media/sda6/share/tony&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;&lt;p&gt;编辑 /etc/exports 将回环设备添加到NFS共享目录&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;/media/sda6/share/tony *(rw,no_root_squash)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;restart NFS server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sudo /etc/init.d/nfs-kernel-server restart&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;&lt;p&gt;挂载NFS&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;sudo mount -t nfs 172.29.43.183:/media/sda6/share/tony /mnt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用df命令查看NFS的挂载信息&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;172.29.43.183:/media/sda6/share/tony   10G  434M  9.1G   5% /media/ipcam_share&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/section&gt;</description><category>UNIX</category><guid>http://blog.cloudnie.ort/posts/loopdev_and_NFS/</guid><pubDate>Fri, 29 Aug 2014 06:45:43 GMT</pubDate></item></channel></rss>