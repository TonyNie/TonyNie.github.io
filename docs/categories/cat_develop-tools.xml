<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凡云的博客 (文章分类：develop tools)</title><link>http://blog.runxcode.com/</link><description></description><atom:link href="http://blog.runxcode.com/categories/cat_develop-tools.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Tue, 05 Sep 2017 07:36:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Repo VS TPLink</title><link>http://blog.runxcode.com/posts/repo_vs_tplink.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 是两个风马牛不相及的事物; 前者是 google 开发的用来管理 多个 git 仓库的工具；
后者是国内一家知名的网络设备商。&lt;/p&gt;
&lt;p&gt;但笔者最近碰到一个非常诡异的问题，如果目录的名字出现 tplink 字符串，就会导致 &lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 工作异常；
如果将目录 tplink 更改为其他名字，比如 tp 或者 test 等等，&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 就工作正常；
笔者一度怀疑 Repo 的开发者是否和 TPLink 公司有些过节，因此挖一个坑。&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-1"&gt;&lt;/a&gt;# mkdir tplink
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-2"&gt;&lt;/a&gt;# cd tplink
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-3"&gt;&lt;/a&gt;# repo init -u ssh://username@reposerver.com:29418/menifest.git
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-4"&gt;&lt;/a&gt;......
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-6"&gt;&lt;/a&gt;bind: atch: Cannot assign requested address
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-7"&gt;&lt;/a&gt;ssh: connect to host 29418 port 22: Cannot assign requested address
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-8"&gt;&lt;/a&gt;fatal: Could not read from remote repository.
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-10"&gt;&lt;/a&gt;Please make sure you have the correct access rights
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-11"&gt;&lt;/a&gt;and the repository exists.
&lt;/pre&gt;&lt;p&gt;抱着吃瓜群众看热闹的心理，笔者想找到那个和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 过节的程序员，和他聊聊人生。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 在实际运作过程中，首先创建一个共享的 SSH 隧道，后续运行的 ssh 命令将复用这个隧道,类似于开来一个本地代理。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 设置了环境变量 GIT_SSH, 其定义为:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b7cbd9bdec7d48f4ae7ebd350c96d7fc-1"&gt;&lt;/a&gt;#!/bin/sh
&lt;a name="rest_code_b7cbd9bdec7d48f4ae7ebd350c96d7fc-2"&gt;&lt;/a&gt;exec ssh -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 设置 GIT_SSH 变量的原因是为了减少建立 SSH 隧道的次数；repo 通常要管理几十个甚至上百个 git 仓库；
如果克隆每个仓库都建立一次 SSH 隧道，会明显增加时间消耗。&lt;/p&gt;
&lt;p&gt;Debug 发现，代理 SSH （就是创建隧道的那个）收到的 参数不对。&lt;/p&gt;
&lt;p&gt;演示一下 GIT_SSH 的用法。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;打开共享 SSH 隧道&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-1"&gt;&lt;/a&gt;#mkdir /tmp/ssh
&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-2"&gt;&lt;/a&gt;#ssh -v -M -N -p 22 -o 'ControlPath /tmp/ssh/test_git_ssh' tony@192.168.3.8
&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-3"&gt;&lt;/a&gt;###// 此处打开了 -v 选项，用来查看 ssh log 信息
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;使用共享的 SSH 隧道 （正常）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-1"&gt;&lt;/a&gt;#mkdir ~/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-2"&gt;&lt;/a&gt;#cd ~/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-3"&gt;&lt;/a&gt;#echo '#!/bin/sh' &amp;gt; git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-4"&gt;&lt;/a&gt;#echo 'exec ssh  -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"' &amp;gt;&amp;gt; git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-5"&gt;&lt;/a&gt;#chmod a+x git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-6"&gt;&lt;/a&gt;#export GIT_SSH='/home/tony_nie/work/check_git/nolink/git_ssh'
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-7"&gt;&lt;/a&gt;#export REPO_SSH_SOCK='/tmp/ssh/test_git_ssh'
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-8"&gt;&lt;/a&gt;#pwd
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-9"&gt;&lt;/a&gt;/home/tony_nie/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-10"&gt;&lt;/a&gt;#git clone ssh://tony@192.168.3.8:22/Users/tony/code/check_git/test_git
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-11"&gt;&lt;/a&gt;Cloning into 'test_git'...
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-12"&gt;&lt;/a&gt;remote: Counting objects: 6, done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-13"&gt;&lt;/a&gt;remote: Compressing objects: 100% (3/3), done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-14"&gt;&lt;/a&gt;remote: Total 6 (delta 0), reused 6 (delta 0)
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-15"&gt;&lt;/a&gt;Receiving objects: 100% (6/6), done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-16"&gt;&lt;/a&gt;Checking connectivity... done.
&lt;/pre&gt;&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;使用共享的 SSH 隧道 （失败）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-1"&gt;&lt;/a&gt;#mkdir ~/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-2"&gt;&lt;/a&gt;#cd ~/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-3"&gt;&lt;/a&gt;#echo '#!/bin/sh' &amp;gt; git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-4"&gt;&lt;/a&gt;#echo 'exec ssh  -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"' &amp;gt;&amp;gt; git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-5"&gt;&lt;/a&gt;#chmod a+x git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-6"&gt;&lt;/a&gt;#export GIT_SSH='/home/tony_nie/work/check_git/tplink/git_ssh'
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-7"&gt;&lt;/a&gt;#export REPO_SSH_SOCK='/tmp/ssh/test_git_ssh'
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-8"&gt;&lt;/a&gt;#pwd
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-9"&gt;&lt;/a&gt;/home/tony_nie/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-10"&gt;&lt;/a&gt;#git clone ssh://tony@192.168.3.8:22/Users/tony/code/check_git/test_git
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-11"&gt;&lt;/a&gt;Cloning into 'test_git'...
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-12"&gt;&lt;/a&gt;bash: tony@192.168.3.8: command not found
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-13"&gt;&lt;/a&gt;fatal: Could not read from remote repository.
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-15"&gt;&lt;/a&gt;Please make sure you have the correct access rights
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-16"&gt;&lt;/a&gt;and the repository exists.
&lt;/pre&gt;&lt;p&gt;执行 git clone 命令时可以看到共享隧道有 log 信息输出。&lt;/p&gt;
&lt;p&gt;正常：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-1"&gt;&lt;/a&gt;debug1: multiplexing control connection
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-2"&gt;&lt;/a&gt;debug1: channel 1: new [mux-control]
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-3"&gt;&lt;/a&gt;debug1: channel 2: new [client-session]
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-4"&gt;&lt;/a&gt;debug1: Sending environment.
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-5"&gt;&lt;/a&gt;debug1: Sending env LC_ALL = en_US.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-6"&gt;&lt;/a&gt;debug1: Sending env LANG = zh_CN.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-7"&gt;&lt;/a&gt;debug1: Sending env LC_CTYPE = en_US.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-8"&gt;&lt;/a&gt;debug1: Sending command: git-upload-pack '/home/tony_nie/work/test_git'
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-9"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype exit-status reply 0
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-10"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype eow@openssh.com reply 0
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-11"&gt;&lt;/a&gt;debug1: channel 2: free: client-session, nchannels 3
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-12"&gt;&lt;/a&gt;debug1: channel 1: free: mux-control, nchannels 2
&lt;/pre&gt;&lt;p&gt;异常：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-1"&gt;&lt;/a&gt;debug1: multiplexing control connection
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-2"&gt;&lt;/a&gt;debug1: channel 1: new [mux-control]
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-3"&gt;&lt;/a&gt;debug1: channel 2: new [client-session]
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-4"&gt;&lt;/a&gt;debug1: Sending environment.
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-5"&gt;&lt;/a&gt;debug1: Sending env LC_PAPER = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-6"&gt;&lt;/a&gt;debug1: Sending env LC_ADDRESS = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-7"&gt;&lt;/a&gt;debug1: Sending env LC_MONETARY = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-8"&gt;&lt;/a&gt;debug1: Sending env LC_NUMERIC = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-9"&gt;&lt;/a&gt;debug1: Sending env LC_ALL = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-10"&gt;&lt;/a&gt;debug1: Sending env LC_TELEPHONE = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-11"&gt;&lt;/a&gt;debug1: Sending env LC_IDENTIFICATION = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-12"&gt;&lt;/a&gt;debug1: Sending env LANG = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-13"&gt;&lt;/a&gt;debug1: Sending env LC_MEASUREMENT = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-14"&gt;&lt;/a&gt;debug1: Sending env LC_CTYPE = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-15"&gt;&lt;/a&gt;debug1: Sending env LC_TIME = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-16"&gt;&lt;/a&gt;debug1: Sending env LC_NAME = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-17"&gt;&lt;/a&gt;debug1: Sending command: tony@192.168.3.8 git-upload-pack '/Users/tony/code/check_git/test_git'
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-18"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype exit-status reply 0
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-19"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype eow@openssh.com reply 0
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-20"&gt;&lt;/a&gt;debug1: channel 2: free: client-session, nchannels 3
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-21"&gt;&lt;/a&gt;debug1: channel 1: free: mux-control, nchannels 2
&lt;/pre&gt;&lt;p&gt;发现如果GIT_SSH 环境变量中如果包含 tplink 字样就会出错； 和 repo 没有关系哎。难道是
git 和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 有过节？&lt;/p&gt;
&lt;p&gt;download git (1.9.1) 的 code 研究一下吧。&lt;/p&gt;
&lt;p&gt;现在整个工程中 grep  TPlink 字符串，没有发现；再  grep plink；咦，有发现哎。&lt;/p&gt;
&lt;p&gt;git v1.9.1
.. sourcecode:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if (protocol == PROTO_SSH) {
        const char *ssh = getenv("GIT_SSH");
        int putty = ssh &amp;amp;&amp;amp; strcasestr(ssh, "plink");
        char *ssh_host = hostandport;
        const char *port = NULL;
        get_host_and_port(&amp;amp;ssh_host, &amp;amp;port);
        port = get_port_numeric(port);

        if (!ssh) ssh = "ssh";
        *arg++ = ssh;
        if (putty &amp;amp;&amp;amp; !strcasestr(ssh, "tortoiseplink"))
                *arg++ = "-batch";
        if (port) {
                /* P is for PuTTY, p is for OpenSSH */
                *arg++ = putty ? "-P" : "-p";
                *arg++ = port;
        }
        *arg++ = ssh_host;
}
&lt;/pre&gt;
&lt;p&gt;很明显在判断 是否 putty 时，出了问题；认为GIT_SSH 环境变量出现 plink 就为 putty  :&amp;gt; &amp;lt;:&lt;/p&gt;
&lt;p&gt;git v2.5&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-1"&gt;&lt;/a&gt;ssh = getenv("GIT_SSH_COMMAND");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-2"&gt;&lt;/a&gt;if (ssh) {
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-3"&gt;&lt;/a&gt;        conn-&amp;gt;use_shell = 1;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-4"&gt;&lt;/a&gt;        putty = 0;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-5"&gt;&lt;/a&gt;} else {
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-6"&gt;&lt;/a&gt;        const char *base;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-7"&gt;&lt;/a&gt;        char *ssh_dup;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-9"&gt;&lt;/a&gt;        ssh = getenv("GIT_SSH");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-10"&gt;&lt;/a&gt;        if (!ssh)
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-11"&gt;&lt;/a&gt;        ssh = "ssh";
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-13"&gt;&lt;/a&gt;        ssh_dup = xstrdup(ssh);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-14"&gt;&lt;/a&gt;        base = basename(ssh_dup);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-16"&gt;&lt;/a&gt;        tortoiseplink = !strcasecmp(base, "tortoiseplink") ||
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-17"&gt;&lt;/a&gt;                !strcasecmp(base, "tortoiseplink.exe");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-18"&gt;&lt;/a&gt;        putty = !strcasecmp(base, "plink") ||
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-19"&gt;&lt;/a&gt;                !strcasecmp(base, "plink.exe") || tortoiseplink;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-21"&gt;&lt;/a&gt;        free(ssh_dup);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-22"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;还好 v2.5 修正了这个问题。&lt;/p&gt;
&lt;p&gt;看来不是 repo 和 TPLink 有过节，而是 git 1.9.1 和 TPLink 开了个玩笑 :)&lt;/p&gt;&lt;/div&gt;</description><category>repo</category><guid>http://blog.runxcode.com/posts/repo_vs_tplink.html</guid><pubDate>Thu, 05 Jan 2017 15:12:47 GMT</pubDate></item><item><title>VirtualBox 找不到网络界面</title><link>http://blog.runxcode.com/posts/virtualbox.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;VBox 的网络模式有 N 多种，每种都有使用场景；个人比较倾向选择 Bridge 模式，好处是虚拟机在
Host 所处的局域网是真实存在的，其他机器都可以访问。但在 Bridge 模式先，如果 ethernet 没有
插入网线，Host 和 Virtual Machine 无法互相访问（host 为 Mac OS）。&lt;/p&gt;
&lt;p&gt;希望将网络模式 hostonly 也配置起来，这样在没有 ethernet 的情况下也可以 ssh 到虚拟机。但配置
网络的时候 UI 上提示没有界面可以选择。google 之，原来 hostonly 需要利用 VBoxManage 创建一个
interface 出来。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;VBoxManage hostonlyif create&lt;/li&gt;
&lt;li&gt;VBoxManage hostonlyif ipconfig vboxnet0 --ip 192.168.56.2 --netmask 255.255.255.0&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>develop tools</category><guid>http://blog.runxcode.com/posts/virtualbox.html</guid><pubDate>Fri, 01 Jul 2016 00:43:07 GMT</pubDate></item><item><title>tmux 中 ssh-agent forwarding 失效问题</title><link>http://blog.runxcode.com/posts/tmux.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;作为程序员，我是比较懒的，对于重复性的劳动深恶痛绝。&lt;/p&gt;
&lt;p&gt;之前 byobu 和 screen 用的不怎么顺手，没有坚持下去；后来转向 tmux，经过一段时间的摸索，发现还是
蛮好用的。&lt;/p&gt;
&lt;p&gt;目前的工作模式使用一台 Mac book，ssh 到一台或者两台 Ubuntu 做开发工作，利用 tmux 打开好几个终端。
下班前做 tmux 的 detach 动作, 第二天上班重新 attach 上去。&lt;/p&gt;
&lt;p&gt;问题来了。重新 attach 后 ssh agent forwarding 就无法成功了，导致向 gerrit push 或者 fetch 的动作 fail；
无耐之下只能将 tmux session 解散，重新组织队伍。 这样无意义的重复劳动是不能接受的。&lt;/p&gt;
&lt;p&gt;阅读 tmux 的帮主手册； google 之，在 &lt;a class="reference external" href="http://unix.stackexchange.com/questions/75681/why-do-i-have-to-re-set-env-vars-in-tmux-when-i-re-attach"&gt;stackexchange&lt;/a&gt; 找到了解决方案，但觉得不够完美(存在安全风险)；&lt;/p&gt;
&lt;p&gt;又花了两个小时了解 ssh-agent forwarding 的原理和流程， 发现一篇好文章: &lt;a class="reference external" href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html"&gt;An_Illustrated_Guide_to_SSH_Agent_Forwarding&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;仔细阅读帮助手册，发现问题出在环境变量 SSH_AUTH_SOCK 上面。&lt;/p&gt;
&lt;p&gt;SSH_AUTH_SOCK 代表一个 unix domain socket 文件，由 sshd 创建 shell 时指定， 是 ssh-client 和 sshd 做 ssh-agent forwarding 的桥梁；shell 退出时失效； 但是 tmux 在 session 保存了该变量。
当再次 attach 时 （tmux detach, 退出 shell，登录 shell， tmux attach), tmux session 中保存的 SSH_AUTH_SOCK 还是第一次登录时 sshd 分配的，已经失效，应该使用当前登录 shell 环境变量中保存的值。&lt;/p&gt;
&lt;p&gt;但是 tmux 的 update-environment 和 set-environment 在 attach session 好像不会生效，即使重新 load 配置文件也
没有效果。暂时只能采用 &lt;a class="reference external" href="http://unix.stackexchange.com/questions/75681/why-do-i-have-to-re-set-env-vars-in-tmux-when-i-re-attach"&gt;stackexchange&lt;/a&gt; 的方案。&lt;/p&gt;&lt;/div&gt;</description><category>develop tools</category><guid>http://blog.runxcode.com/posts/tmux.html</guid><pubDate>Fri, 04 Dec 2015 15:29:38 GMT</pubDate></item><item><title>gcc 常用实例</title><link>http://blog.runxcode.com/posts/gcc.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://gcc.gnu.org/"&gt;GCC&lt;/a&gt; (the GNU Compiler Collection) 是由GNU组织开发的编译器套件, 可以执行预处理,编译,汇编和链接动作. 这篇文章首先向大家介绍如何生成C语言的可执行文件, 共享库(动态库) 以及静态库, 然后介绍一下gcc常用的选项.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;例子&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;以下的例子都在Ubuntu13.10 上使用gcc 4.8.1 测试通过. 假设有三个文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;main.c 定义main函数&lt;/li&gt;
&lt;li&gt;a.c 定义add 函数&lt;/li&gt;
&lt;li&gt;b.c 定义sub 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;可执行文件&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -o test main.c a.c b.c&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;共享库&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;生成共享库&lt;/dt&gt;
&lt;dd&gt;gcc -shared -o libmymath.so a.c b.c&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;使用共享库&lt;/dt&gt;
&lt;dd&gt;gcc -o test main.c -L. -lmymath&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;静态库&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;生成静态库&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic"&gt;
&lt;li&gt;gcc -c a.c b.c&lt;/li&gt;
&lt;li&gt;ar crv libmymath.a a.o b.o&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;使用静态库&lt;/dt&gt;
&lt;dd&gt;gcc -o test main.c -static -L. -lmymath&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;注意: 当ld的搜索默认搜索路径即包含共享库又包含静态库时, 默认选择链接共享库；若需要链接静态库, 则需要加上-static选项&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;选项&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;-I(大写的i) 添加路径到预处理器的搜索目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;使用方法 -IPATH&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gcc -I. -o test main.c a.c b.c&lt;/li&gt;
&lt;li&gt;gcc -I/home/tony/work/myheaer -o test main.c&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;注意: 在搜索头文件时, 通过-I添加的目录会优先与系统默认的搜索目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-D 预定义宏&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用方法 -DNAME&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;gcc -DCONFIG_GATE -o test main.c&lt;/dt&gt;
&lt;dd&gt;等同于: #define CONFIG_GATE=1&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;gcc -DCONFIG_GATE_VALUE=128 -o test main.c&lt;/dt&gt;
&lt;dd&gt;等同于: #define CONFIG_GATE_VALU=128&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;-c 执行编译和汇编, 但不执行链接动作, 生成中间文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gcc -c main.c a.c b.c&lt;/li&gt;
&lt;li&gt;生成 main.o, a.o, b.o&lt;/li&gt;
&lt;li&gt;gcc -c main.s a.s b.s&lt;/li&gt;
&lt;li&gt;生成 main.o, a.o, b.o&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;-S 执行编译动作, 但不执行汇编, 生成汇编文件, 通常文件后缀为.s&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gcc -S main.c a.c b.c&lt;/li&gt;
&lt;li&gt;生成 main.s, a.s, b.s&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-L 添加路径到链接器的搜索目录&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -o test main.c -L.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-l(小写的L) 在指定的library中查找符号表&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -o test main.c -L. -lmypath&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-Wall 打开所有的编译警告&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -Wall -o test main.c&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-static 优先选择链接静态库&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -o test main.c -static -L. -lmymath&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-shared 生成的目标为共享库&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -shared -o libmymath.so a.c b.c&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;-o 指定生成目标的名字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;-Wl 传递参数给链接器&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gcc -o test main.c -Wl,-Map=out.map -L. -lmymath&lt;/li&gt;
&lt;li&gt;gcc -o test main.c -Wl,-rpath=/media/code/exercise/gcc -L. -lmymath&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;rpath 的作用是添加目录到运行时共享库搜索路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;-g 生成debugging信息, 在使用debug工具比如GCB的时候需要&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;gcc -g -o test main.c a.c .bc&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;结束语&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然gcc是一个非常强大的工具, 但当一个工程比较庞大是, 直接使用gcc是不明智的选择.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;对于中等规模的工程,使用makefile来管理是一个不错的选择&lt;/li&gt;
&lt;li&gt;但对于非常庞大的工程, 比如KDE, 可以使用更高阶的管理工具, 比如 &lt;a class="reference external" href="http://www.cmake.org/"&gt;CMake&lt;/a&gt; , &lt;a class="reference external" href="http://www.gnu.org/software/automake/"&gt;automake&lt;/a&gt; 以及 &lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>develop tools</category><guid>http://blog.runxcode.com/posts/gcc.html</guid><pubDate>Sun, 22 Mar 2015 14:10:59 GMT</pubDate></item></channel></rss>