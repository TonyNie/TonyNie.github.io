<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凡云的博客 (关于文章 C++)</title><link>https://blog.cloudnie.org/</link><description></description><atom:link href="https://blog.cloudnie.org/categories/cat_c/c%2B%2B.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Tue, 25 Apr 2023 05:50:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>单元测试之 C 语言</title><link>https://blog.cloudnie.org/posts/c-unit-test/</link><dc:creator>CloudNie</dc:creator><description>&lt;p&gt;目前关于 C 单元测试的书籍和资料比较少， 在这里分享一下我的想法。&lt;/p&gt;
&lt;section id="static"&gt;
&lt;h2&gt;如何测试 static 函数&lt;/h2&gt;
&lt;p&gt;当产品代码和单元测试代码隔离时， 测试 static 的函数需要些技巧；有同学认为
可以不对 static 的函数不进行测试，只要对其调用者做单元测试就可以了。但对于嵌套比较
深的 static 函数来说， 测试用例不是太好构造。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;使用宏来代替 static 关键字， 根据不同的场合对宏进行赋值；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在单元测试代码中 include 产品代码的源文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用工具将待测试的产品代码源文件和单元测试源文件合并在一起生成新的文件；编译时选择新生成的文件&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三种方法中我比较推荐第3中方法; 好处时不影响产品代码，又可以具有较好的 coding style; 麻烦的地方在于
building 过程中定位 warning 或者 error 不是太直接。&lt;/p&gt;
&lt;/section&gt;
&lt;section id="main"&gt;
&lt;h2&gt;如何处理 main 函数所在的文件&lt;/h2&gt;
&lt;p&gt;如果产品代码和单元测试代码是隔离开来的，通常就各自拥有自己的 main 的函数；
在 build 单元测试代码时就会出现冲突。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;修改 link 脚本， 将单元测试的入口函数指定为 unit_test_main 或者其他;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用工具将产品代码 main 函数所在的文件 copy 一份， 同时将其中的 main 函数重新命名生成新的文件；building 时选择新生成的文件;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><category>C/C++</category><guid>https://blog.cloudnie.org/posts/c-unit-test/</guid><pubDate>Sat, 21 Nov 2015 02:44:59 GMT</pubDate></item><item><title>_IOC定义的不严谨性</title><link>https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/</link><dc:creator>CloudNie</dc:creator><description>&lt;blockquote&gt;
&lt;p&gt;C语言中默认类型转换绝对是一个坑. 最近项目中有以下一段code, 隐藏了一个很严重的BUG.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_7373668eed4c40168de0ae1d518c2943-1" name="rest_code_7373668eed4c40168de0ae1d518c2943-1" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_7373668eed4c40168de0ae1d518c2943-1"&gt;&lt;/a&gt;int v4l2_ioctl(int requet, void *arg) {
&lt;a id="rest_code_7373668eed4c40168de0ae1d518c2943-2" name="rest_code_7373668eed4c40168de0ae1d518c2943-2" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_7373668eed4c40168de0ae1d518c2943-2"&gt;&lt;/a&gt;        if (UVCIOC_CTRL_QUERY == request) {
&lt;a id="rest_code_7373668eed4c40168de0ae1d518c2943-3" name="rest_code_7373668eed4c40168de0ae1d518c2943-3" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_7373668eed4c40168de0ae1d518c2943-3"&gt;&lt;/a&gt;        /* do something */
&lt;a id="rest_code_7373668eed4c40168de0ae1d518c2943-4" name="rest_code_7373668eed4c40168de0ae1d518c2943-4" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_7373668eed4c40168de0ae1d518c2943-4"&gt;&lt;/a&gt;        }
&lt;a id="rest_code_7373668eed4c40168de0ae1d518c2943-5" name="rest_code_7373668eed4c40168de0ae1d518c2943-5" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_7373668eed4c40168de0ae1d518c2943-5"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际执行过程发现, &lt;em&gt;UVCIOC_CTRL_QUERY == request&lt;/em&gt; 永远为false, 即使request == UVCIOC_CTRL_QUERY.&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;运行环境:&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Ubuntu12.04 x86_64&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;写了一段测试code:
.. sourcecode:&lt;/p&gt;
&lt;pre class="literal-block"&gt;int main(int argc, char **argv)
{
        int request = UVCIOC_CTRL_QUERY;

        if (UVCIOC_CTRL_QUERY == request)
                fprintf(stdout, "equal\n");
        else
                fprintf(stdout, "different\n");
        return 0;
}&lt;/pre&gt;
&lt;p&gt;编译, 运行, 得到的结果是 &lt;strong&gt;different&lt;/strong&gt;,
应该是默认转换出了问题. 查看UVCIOC_CTRL_QUERY的定义, 所用到的宏主要定义在 &lt;em&gt;&amp;lt;linux/uvcvideo.h&amp;gt;&lt;/em&gt; 和 &lt;em&gt;&amp;lt;sys/ioctl.h&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-1" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-1" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-1"&gt;&lt;/a&gt;#define _IOC_TYPECHECK(t) (sizeof(t))
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-2" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-2" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-2"&gt;&lt;/a&gt;# define _IOC_WRITE     1U
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-3" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-3" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-3"&gt;&lt;/a&gt;# define _IOC_READ      2U
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-4" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-4" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-4"&gt;&lt;/a&gt;#define _IOC(dir,type,nr,size) \
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-5" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-5" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-5"&gt;&lt;/a&gt;        (((dir)  &amp;lt;&amp;lt; _IOC_DIRSHIFT) | \
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-6" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-6" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-6"&gt;&lt;/a&gt;         ((type) &amp;lt;&amp;lt; _IOC_TYPESHIFT) | \
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-7" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-7" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-7"&gt;&lt;/a&gt;         ((nr)   &amp;lt;&amp;lt; _IOC_NRSHIFT) | \
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-8" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-8" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-8"&gt;&lt;/a&gt;         ((size) &amp;lt;&amp;lt; _IOC_SIZESHIFT))
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-9" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-9" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-9"&gt;&lt;/a&gt;#define _IOWR(type,nr,size)     _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
&lt;a id="rest_code_eeb8718f27d34debaa8ad887e7fd4601-10" name="rest_code_eeb8718f27d34debaa8ad887e7fd4601-10" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_eeb8718f27d34debaa8ad887e7fd4601-10"&gt;&lt;/a&gt;#define UVCIOC_CTRL_QUERY       _IOWR('u', 0x21, struct uvc_xu_control_query)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将UVCIOC_CTRL_QUERY 展开, 得到的定义是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;(3U &amp;lt;&amp;lt; 30) | ((sizeof(struct uvc_xu_control_query)) &amp;lt;&amp;lt; 16) | ('u' &amp;lt;&amp;lt; 8) | (0x21)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算得到的结果为 &lt;em&gt;0xC0107521&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在64位机器上, sizeof的返回类型为 &lt;em&gt;long unsigned int&lt;/em&gt;. 所以UVCIOC_CTRL_QUERY的类型为 &lt;em&gt;long unsigned int&lt;/em&gt;. 所以UVCIOC_CTRL_QUERY的实际值为 &lt;em&gt;0x00000000C0107521&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在上述code发生了两次默认转换:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;requet = UVCIOC_CTRL_QUERY&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;long unsigned int&lt;/em&gt; 转换为int&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;long unsigned int 的长度为64 bits, int 为32 bits, 直接截断&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转换后 &lt;em&gt;request=-1072663263(0xC0107521)&lt;/em&gt; , 小于 0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;UVCIOC_CTRL_QUERY == request&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;requet 转换为 &lt;em&gt;long unsigned int&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转换后为 &lt;em&gt;0xFFFFFFFFC0107521&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UVCIOC_CTRL_QUERY != 0xFFFFFFFFC0107521&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;request&lt;/em&gt; 参数是传给系统调用ioctl的第二个参数, 而ioctl的定义为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;int ioctl(int d, int request, ...)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以将 &lt;em&gt;requet&lt;/em&gt; 定义为unsigned int 也不合适.&lt;/p&gt;
&lt;p&gt;无论在64位还是32位的机器上, _IOC的定义应该为uint32_t, 所以_IOC的定义应该加强制类型转换.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_345c148a4c4545f69c66c7d6e9368008-1" name="rest_code_345c148a4c4545f69c66c7d6e9368008-1" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_345c148a4c4545f69c66c7d6e9368008-1"&gt;&lt;/a&gt;#define _IOC(dir,type,nr,size) \
&lt;a id="rest_code_345c148a4c4545f69c66c7d6e9368008-2" name="rest_code_345c148a4c4545f69c66c7d6e9368008-2" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_345c148a4c4545f69c66c7d6e9368008-2"&gt;&lt;/a&gt;        (uint32_t) (    \
&lt;a id="rest_code_345c148a4c4545f69c66c7d6e9368008-3" name="rest_code_345c148a4c4545f69c66c7d6e9368008-3" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_345c148a4c4545f69c66c7d6e9368008-3"&gt;&lt;/a&gt;        (((dir)  &amp;lt;&amp;lt; _IOC_DIRSHIFT) | \
&lt;a id="rest_code_345c148a4c4545f69c66c7d6e9368008-4" name="rest_code_345c148a4c4545f69c66c7d6e9368008-4" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_345c148a4c4545f69c66c7d6e9368008-4"&gt;&lt;/a&gt;         ((type) &amp;lt;&amp;lt; _IOC_TYPESHIFT) | \
&lt;a id="rest_code_345c148a4c4545f69c66c7d6e9368008-5" name="rest_code_345c148a4c4545f69c66c7d6e9368008-5" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_345c148a4c4545f69c66c7d6e9368008-5"&gt;&lt;/a&gt;         ((nr)   &amp;lt;&amp;lt; _IOC_NRSHIFT) | \
&lt;a id="rest_code_345c148a4c4545f69c66c7d6e9368008-6" name="rest_code_345c148a4c4545f69c66c7d6e9368008-6" href="https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/#rest_code_345c148a4c4545f69c66c7d6e9368008-6"&gt;&lt;/a&gt;         ((size) &amp;lt;&amp;lt; _IOC_SIZESHIFT)))
&lt;/pre&gt;&lt;/div&gt;</description><category>C/C++</category><guid>https://blog.cloudnie.org/posts/cast_int_to_long_unsigned_int/</guid><pubDate>Sun, 21 Sep 2014 13:37:36 GMT</pubDate></item></channel></rss>