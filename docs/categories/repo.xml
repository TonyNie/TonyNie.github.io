<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凡云的博客 (文章分类：repo)</title><link>http://blog.runxcode.com/</link><description></description><atom:link href="http://blog.runxcode.com/categories/repo.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Tue, 05 Sep 2017 11:26:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>repo sync 加速</title><link>http://blog.runxcode.com/posts/speed-up-the-downloading-of-sdk.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;项目是用 repo 来管理 SDK，随着 SDK 中包含的仓库越来越多，以及单个仓库的体积越来越大，下载 SDK 的时间越来越长，目前已经超过了 15 分钟。
有没有办法加速 SDK 的下载？ 答案是有的，就是利用  repo 命令的 --reference 参数，可以将下载时间优化到 1 分钟左右。&lt;/p&gt;
&lt;p&gt;该方法需要先创建本地 SDK mirror，然后在执行 repo init 命令的时候设定 --reference 参数。
SDK mirror 只需要创建一次，未来 sync 代码时可以重复使用。&lt;/p&gt;
&lt;p&gt;创建 SDK mirror:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-1"&gt;&lt;/a&gt;mkdir sdk_repo_mirror
&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-2"&gt;&lt;/a&gt;cd sdk_repo_mirror
&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-3"&gt;&lt;/a&gt;repo init -u ssh://YOUR_ACOUNT@GERRIT_HOST/manifest --mirror
&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-4"&gt;&lt;/a&gt;repo sync --no-tags;
&lt;/pre&gt;&lt;p&gt;Download SDK Source:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-1"&gt;&lt;/a&gt;mkdir sdk_work
&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-2"&gt;&lt;/a&gt;cd sdk_work
&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-3"&gt;&lt;/a&gt;repo init -u ssh://YOUR_ACOUNT@GERRIT_HOST/manifest --reference=YOUR_SDK_MIRROR_PATH
&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-4"&gt;&lt;/a&gt;repo sync
&lt;/pre&gt;&lt;p&gt;repo 仓库中的注释:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_da63dd18e8b94cd7a99d5471a33294b5-1"&gt;&lt;/a&gt;The --reference option can be used to point to a directory that has the content of a --mirror sync. This will make the working
&lt;a name="rest_code_da63dd18e8b94cd7a99d5471a33294b5-2"&gt;&lt;/a&gt;directory use as much data as possible from the local reference directory when fetching from the server. This will make the sync
&lt;a name="rest_code_da63dd18e8b94cd7a99d5471a33294b5-3"&gt;&lt;/a&gt;go a lot faster by reducing data traffic on the network.
&lt;/pre&gt;&lt;/div&gt;</description><category>git</category><category>repo</category><guid>http://blog.runxcode.com/posts/speed-up-the-downloading-of-sdk.html</guid><pubDate>Tue, 05 Sep 2017 07:32:28 GMT</pubDate></item><item><title>Repo VS TPLink</title><link>http://blog.runxcode.com/posts/repo_vs_tplink.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 是两个风马牛不相及的事物; 前者是 google 开发的用来管理 多个 git 仓库的工具；
后者是国内一家知名的网络设备商。&lt;/p&gt;
&lt;p&gt;但笔者最近碰到一个非常诡异的问题，如果目录的名字出现 tplink 字符串，就会导致 &lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 工作异常；
如果将目录 tplink 更改为其他名字，比如 tp 或者 test 等等，&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 就工作正常；
笔者一度怀疑 Repo 的开发者是否和 TPLink 公司有些过节，因此挖一个坑。&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-1"&gt;&lt;/a&gt;# mkdir tplink
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-2"&gt;&lt;/a&gt;# cd tplink
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-3"&gt;&lt;/a&gt;# repo init -u ssh://username@reposerver.com:29418/menifest.git
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-4"&gt;&lt;/a&gt;......
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-6"&gt;&lt;/a&gt;bind: atch: Cannot assign requested address
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-7"&gt;&lt;/a&gt;ssh: connect to host 29418 port 22: Cannot assign requested address
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-8"&gt;&lt;/a&gt;fatal: Could not read from remote repository.
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-10"&gt;&lt;/a&gt;Please make sure you have the correct access rights
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-11"&gt;&lt;/a&gt;and the repository exists.
&lt;/pre&gt;&lt;p&gt;抱着吃瓜群众看热闹的心理，笔者想找到那个和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 过节的程序员，和他聊聊人生。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 在实际运作过程中，首先创建一个共享的 SSH 隧道，后续运行的 ssh 命令将复用这个隧道,类似于开来一个本地代理。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 设置了环境变量 GIT_SSH, 其定义为:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b7cbd9bdec7d48f4ae7ebd350c96d7fc-1"&gt;&lt;/a&gt;#!/bin/sh
&lt;a name="rest_code_b7cbd9bdec7d48f4ae7ebd350c96d7fc-2"&gt;&lt;/a&gt;exec ssh -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 设置 GIT_SSH 变量的原因是为了减少建立 SSH 隧道的次数；repo 通常要管理几十个甚至上百个 git 仓库；
如果克隆每个仓库都建立一次 SSH 隧道，会明显增加时间消耗。&lt;/p&gt;
&lt;p&gt;Debug 发现，代理 SSH （就是创建隧道的那个）收到的 参数不对。&lt;/p&gt;
&lt;p&gt;演示一下 GIT_SSH 的用法。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;打开共享 SSH 隧道&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-1"&gt;&lt;/a&gt;#mkdir /tmp/ssh
&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-2"&gt;&lt;/a&gt;#ssh -v -M -N -p 22 -o 'ControlPath /tmp/ssh/test_git_ssh' tony@192.168.3.8
&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-3"&gt;&lt;/a&gt;###// 此处打开了 -v 选项，用来查看 ssh log 信息
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;使用共享的 SSH 隧道 （正常）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-1"&gt;&lt;/a&gt;#mkdir ~/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-2"&gt;&lt;/a&gt;#cd ~/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-3"&gt;&lt;/a&gt;#echo '#!/bin/sh' &amp;gt; git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-4"&gt;&lt;/a&gt;#echo 'exec ssh  -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"' &amp;gt;&amp;gt; git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-5"&gt;&lt;/a&gt;#chmod a+x git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-6"&gt;&lt;/a&gt;#export GIT_SSH='/home/tony_nie/work/check_git/nolink/git_ssh'
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-7"&gt;&lt;/a&gt;#export REPO_SSH_SOCK='/tmp/ssh/test_git_ssh'
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-8"&gt;&lt;/a&gt;#pwd
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-9"&gt;&lt;/a&gt;/home/tony_nie/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-10"&gt;&lt;/a&gt;#git clone ssh://tony@192.168.3.8:22/Users/tony/code/check_git/test_git
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-11"&gt;&lt;/a&gt;Cloning into 'test_git'...
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-12"&gt;&lt;/a&gt;remote: Counting objects: 6, done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-13"&gt;&lt;/a&gt;remote: Compressing objects: 100% (3/3), done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-14"&gt;&lt;/a&gt;remote: Total 6 (delta 0), reused 6 (delta 0)
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-15"&gt;&lt;/a&gt;Receiving objects: 100% (6/6), done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-16"&gt;&lt;/a&gt;Checking connectivity... done.
&lt;/pre&gt;&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;使用共享的 SSH 隧道 （失败）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-1"&gt;&lt;/a&gt;#mkdir ~/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-2"&gt;&lt;/a&gt;#cd ~/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-3"&gt;&lt;/a&gt;#echo '#!/bin/sh' &amp;gt; git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-4"&gt;&lt;/a&gt;#echo 'exec ssh  -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"' &amp;gt;&amp;gt; git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-5"&gt;&lt;/a&gt;#chmod a+x git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-6"&gt;&lt;/a&gt;#export GIT_SSH='/home/tony_nie/work/check_git/tplink/git_ssh'
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-7"&gt;&lt;/a&gt;#export REPO_SSH_SOCK='/tmp/ssh/test_git_ssh'
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-8"&gt;&lt;/a&gt;#pwd
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-9"&gt;&lt;/a&gt;/home/tony_nie/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-10"&gt;&lt;/a&gt;#git clone ssh://tony@192.168.3.8:22/Users/tony/code/check_git/test_git
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-11"&gt;&lt;/a&gt;Cloning into 'test_git'...
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-12"&gt;&lt;/a&gt;bash: tony@192.168.3.8: command not found
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-13"&gt;&lt;/a&gt;fatal: Could not read from remote repository.
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-15"&gt;&lt;/a&gt;Please make sure you have the correct access rights
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-16"&gt;&lt;/a&gt;and the repository exists.
&lt;/pre&gt;&lt;p&gt;执行 git clone 命令时可以看到共享隧道有 log 信息输出。&lt;/p&gt;
&lt;p&gt;正常：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-1"&gt;&lt;/a&gt;debug1: multiplexing control connection
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-2"&gt;&lt;/a&gt;debug1: channel 1: new [mux-control]
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-3"&gt;&lt;/a&gt;debug1: channel 2: new [client-session]
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-4"&gt;&lt;/a&gt;debug1: Sending environment.
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-5"&gt;&lt;/a&gt;debug1: Sending env LC_ALL = en_US.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-6"&gt;&lt;/a&gt;debug1: Sending env LANG = zh_CN.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-7"&gt;&lt;/a&gt;debug1: Sending env LC_CTYPE = en_US.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-8"&gt;&lt;/a&gt;debug1: Sending command: git-upload-pack '/home/tony_nie/work/test_git'
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-9"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype exit-status reply 0
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-10"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype eow@openssh.com reply 0
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-11"&gt;&lt;/a&gt;debug1: channel 2: free: client-session, nchannels 3
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-12"&gt;&lt;/a&gt;debug1: channel 1: free: mux-control, nchannels 2
&lt;/pre&gt;&lt;p&gt;异常：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-1"&gt;&lt;/a&gt;debug1: multiplexing control connection
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-2"&gt;&lt;/a&gt;debug1: channel 1: new [mux-control]
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-3"&gt;&lt;/a&gt;debug1: channel 2: new [client-session]
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-4"&gt;&lt;/a&gt;debug1: Sending environment.
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-5"&gt;&lt;/a&gt;debug1: Sending env LC_PAPER = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-6"&gt;&lt;/a&gt;debug1: Sending env LC_ADDRESS = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-7"&gt;&lt;/a&gt;debug1: Sending env LC_MONETARY = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-8"&gt;&lt;/a&gt;debug1: Sending env LC_NUMERIC = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-9"&gt;&lt;/a&gt;debug1: Sending env LC_ALL = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-10"&gt;&lt;/a&gt;debug1: Sending env LC_TELEPHONE = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-11"&gt;&lt;/a&gt;debug1: Sending env LC_IDENTIFICATION = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-12"&gt;&lt;/a&gt;debug1: Sending env LANG = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-13"&gt;&lt;/a&gt;debug1: Sending env LC_MEASUREMENT = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-14"&gt;&lt;/a&gt;debug1: Sending env LC_CTYPE = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-15"&gt;&lt;/a&gt;debug1: Sending env LC_TIME = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-16"&gt;&lt;/a&gt;debug1: Sending env LC_NAME = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-17"&gt;&lt;/a&gt;debug1: Sending command: tony@192.168.3.8 git-upload-pack '/Users/tony/code/check_git/test_git'
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-18"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype exit-status reply 0
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-19"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype eow@openssh.com reply 0
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-20"&gt;&lt;/a&gt;debug1: channel 2: free: client-session, nchannels 3
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-21"&gt;&lt;/a&gt;debug1: channel 1: free: mux-control, nchannels 2
&lt;/pre&gt;&lt;p&gt;发现如果GIT_SSH 环境变量中如果包含 tplink 字样就会出错； 和 repo 没有关系哎。难道是
git 和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 有过节？&lt;/p&gt;
&lt;p&gt;download git (1.9.1) 的 code 研究一下吧。&lt;/p&gt;
&lt;p&gt;现在整个工程中 grep  TPlink 字符串，没有发现；再  grep plink；咦，有发现哎。&lt;/p&gt;
&lt;p&gt;git v1.9.1
.. sourcecode:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if (protocol == PROTO_SSH) {
        const char *ssh = getenv("GIT_SSH");
        int putty = ssh &amp;amp;&amp;amp; strcasestr(ssh, "plink");
        char *ssh_host = hostandport;
        const char *port = NULL;
        get_host_and_port(&amp;amp;ssh_host, &amp;amp;port);
        port = get_port_numeric(port);

        if (!ssh) ssh = "ssh";
        *arg++ = ssh;
        if (putty &amp;amp;&amp;amp; !strcasestr(ssh, "tortoiseplink"))
                *arg++ = "-batch";
        if (port) {
                /* P is for PuTTY, p is for OpenSSH */
                *arg++ = putty ? "-P" : "-p";
                *arg++ = port;
        }
        *arg++ = ssh_host;
}
&lt;/pre&gt;
&lt;p&gt;很明显在判断 是否 putty 时，出了问题；认为GIT_SSH 环境变量出现 plink 就为 putty  :&amp;gt; &amp;lt;:&lt;/p&gt;
&lt;p&gt;git v2.5&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-1"&gt;&lt;/a&gt;ssh = getenv("GIT_SSH_COMMAND");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-2"&gt;&lt;/a&gt;if (ssh) {
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-3"&gt;&lt;/a&gt;        conn-&amp;gt;use_shell = 1;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-4"&gt;&lt;/a&gt;        putty = 0;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-5"&gt;&lt;/a&gt;} else {
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-6"&gt;&lt;/a&gt;        const char *base;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-7"&gt;&lt;/a&gt;        char *ssh_dup;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-9"&gt;&lt;/a&gt;        ssh = getenv("GIT_SSH");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-10"&gt;&lt;/a&gt;        if (!ssh)
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-11"&gt;&lt;/a&gt;        ssh = "ssh";
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-13"&gt;&lt;/a&gt;        ssh_dup = xstrdup(ssh);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-14"&gt;&lt;/a&gt;        base = basename(ssh_dup);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-16"&gt;&lt;/a&gt;        tortoiseplink = !strcasecmp(base, "tortoiseplink") ||
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-17"&gt;&lt;/a&gt;                !strcasecmp(base, "tortoiseplink.exe");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-18"&gt;&lt;/a&gt;        putty = !strcasecmp(base, "plink") ||
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-19"&gt;&lt;/a&gt;                !strcasecmp(base, "plink.exe") || tortoiseplink;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-21"&gt;&lt;/a&gt;        free(ssh_dup);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-22"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;还好 v2.5 修正了这个问题。&lt;/p&gt;
&lt;p&gt;看来不是 repo 和 TPLink 有过节，而是 git 1.9.1 和 TPLink 开了个玩笑 :)&lt;/p&gt;&lt;/div&gt;</description><category>repo</category><guid>http://blog.runxcode.com/posts/repo_vs_tplink.html</guid><pubDate>Thu, 05 Jan 2017 15:12:47 GMT</pubDate></item></channel></rss>