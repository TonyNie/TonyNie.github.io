<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>凡云的博客</title><link>http://blog.runxcode.com/</link><description>涛声依旧</description><atom:link href="http://blog.runxcode.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Tue, 05 Sep 2017 11:26:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>repo sync 加速</title><link>http://blog.runxcode.com/posts/speed-up-the-downloading-of-sdk.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;项目是用 repo 来管理 SDK，随着 SDK 中包含的仓库越来越多，以及单个仓库的体积越来越大，下载 SDK 的时间越来越长，目前已经超过了 15 分钟。
有没有办法加速 SDK 的下载？ 答案是有的，就是利用  repo 命令的 --reference 参数，可以将下载时间优化到 1 分钟左右。&lt;/p&gt;
&lt;p&gt;该方法需要先创建本地 SDK mirror，然后在执行 repo init 命令的时候设定 --reference 参数。
SDK mirror 只需要创建一次，未来 sync 代码时可以重复使用。&lt;/p&gt;
&lt;p&gt;创建 SDK mirror:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-1"&gt;&lt;/a&gt;mkdir sdk_repo_mirror
&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-2"&gt;&lt;/a&gt;cd sdk_repo_mirror
&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-3"&gt;&lt;/a&gt;repo init -u ssh://YOUR_ACOUNT@GERRIT_HOST/manifest --mirror
&lt;a name="rest_code_888dc436f2464f1b853d8f759a6b6184-4"&gt;&lt;/a&gt;repo sync --no-tags;
&lt;/pre&gt;&lt;p&gt;Download SDK Source:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-1"&gt;&lt;/a&gt;mkdir sdk_work
&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-2"&gt;&lt;/a&gt;cd sdk_work
&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-3"&gt;&lt;/a&gt;repo init -u ssh://YOUR_ACOUNT@GERRIT_HOST/manifest --reference=YOUR_SDK_MIRROR_PATH
&lt;a name="rest_code_45aa9f0690ed40cb9682efc2ade65ae0-4"&gt;&lt;/a&gt;repo sync
&lt;/pre&gt;&lt;p&gt;repo 仓库中的注释:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_da63dd18e8b94cd7a99d5471a33294b5-1"&gt;&lt;/a&gt;The --reference option can be used to point to a directory that has the content of a --mirror sync. This will make the working
&lt;a name="rest_code_da63dd18e8b94cd7a99d5471a33294b5-2"&gt;&lt;/a&gt;directory use as much data as possible from the local reference directory when fetching from the server. This will make the sync
&lt;a name="rest_code_da63dd18e8b94cd7a99d5471a33294b5-3"&gt;&lt;/a&gt;go a lot faster by reducing data traffic on the network.
&lt;/pre&gt;&lt;/div&gt;</description><category>git</category><category>repo</category><guid>http://blog.runxcode.com/posts/speed-up-the-downloading-of-sdk.html</guid><pubDate>Tue, 05 Sep 2017 07:32:28 GMT</pubDate></item><item><title>多媒体开发注意事项</title><link>http://blog.runxcode.com/posts/media_trap.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;ol class="arabic simple"&gt;
&lt;li&gt;时间戳&lt;/li&gt;
&lt;li&gt;网络缓存&lt;/li&gt;
&lt;/ol&gt;</description><category>Multimedia</category><guid>http://blog.runxcode.com/posts/media_trap.html</guid><pubDate>Sat, 28 Jan 2017 13:26:15 GMT</pubDate></item><item><title>Repo VS TPLink</title><link>http://blog.runxcode.com/posts/repo_vs_tplink.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 是两个风马牛不相及的事物; 前者是 google 开发的用来管理 多个 git 仓库的工具；
后者是国内一家知名的网络设备商。&lt;/p&gt;
&lt;p&gt;但笔者最近碰到一个非常诡异的问题，如果目录的名字出现 tplink 字符串，就会导致 &lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 工作异常；
如果将目录 tplink 更改为其他名字，比如 tp 或者 test 等等，&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 就工作正常；
笔者一度怀疑 Repo 的开发者是否和 TPLink 公司有些过节，因此挖一个坑。&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-1"&gt;&lt;/a&gt;# mkdir tplink
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-2"&gt;&lt;/a&gt;# cd tplink
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-3"&gt;&lt;/a&gt;# repo init -u ssh://username@reposerver.com:29418/menifest.git
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-4"&gt;&lt;/a&gt;......
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-6"&gt;&lt;/a&gt;bind: atch: Cannot assign requested address
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-7"&gt;&lt;/a&gt;ssh: connect to host 29418 port 22: Cannot assign requested address
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-8"&gt;&lt;/a&gt;fatal: Could not read from remote repository.
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-10"&gt;&lt;/a&gt;Please make sure you have the correct access rights
&lt;a name="rest_code_6746bbcbd408427cb0f451757447279f-11"&gt;&lt;/a&gt;and the repository exists.
&lt;/pre&gt;&lt;p&gt;抱着吃瓜群众看热闹的心理，笔者想找到那个和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 过节的程序员，和他聊聊人生。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 在实际运作过程中，首先创建一个共享的 SSH 隧道，后续运行的 ssh 命令将复用这个隧道,类似于开来一个本地代理。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 设置了环境变量 GIT_SSH, 其定义为:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b7cbd9bdec7d48f4ae7ebd350c96d7fc-1"&gt;&lt;/a&gt;#!/bin/sh
&lt;a name="rest_code_b7cbd9bdec7d48f4ae7ebd350c96d7fc-2"&gt;&lt;/a&gt;exec ssh -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://source.android.com/source/using-repo.html"&gt;Repo&lt;/a&gt; 设置 GIT_SSH 变量的原因是为了减少建立 SSH 隧道的次数；repo 通常要管理几十个甚至上百个 git 仓库；
如果克隆每个仓库都建立一次 SSH 隧道，会明显增加时间消耗。&lt;/p&gt;
&lt;p&gt;Debug 发现，代理 SSH （就是创建隧道的那个）收到的 参数不对。&lt;/p&gt;
&lt;p&gt;演示一下 GIT_SSH 的用法。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;打开共享 SSH 隧道&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-1"&gt;&lt;/a&gt;#mkdir /tmp/ssh
&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-2"&gt;&lt;/a&gt;#ssh -v -M -N -p 22 -o 'ControlPath /tmp/ssh/test_git_ssh' tony@192.168.3.8
&lt;a name="rest_code_a7d7570a26f64943add7a5e12e67269f-3"&gt;&lt;/a&gt;###// 此处打开了 -v 选项，用来查看 ssh log 信息
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;使用共享的 SSH 隧道 （正常）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-1"&gt;&lt;/a&gt;#mkdir ~/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-2"&gt;&lt;/a&gt;#cd ~/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-3"&gt;&lt;/a&gt;#echo '#!/bin/sh' &amp;gt; git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-4"&gt;&lt;/a&gt;#echo 'exec ssh  -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"' &amp;gt;&amp;gt; git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-5"&gt;&lt;/a&gt;#chmod a+x git_ssh
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-6"&gt;&lt;/a&gt;#export GIT_SSH='/home/tony_nie/work/check_git/nolink/git_ssh'
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-7"&gt;&lt;/a&gt;#export REPO_SSH_SOCK='/tmp/ssh/test_git_ssh'
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-8"&gt;&lt;/a&gt;#pwd
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-9"&gt;&lt;/a&gt;/home/tony_nie/work/check_git/nolink
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-10"&gt;&lt;/a&gt;#git clone ssh://tony@192.168.3.8:22/Users/tony/code/check_git/test_git
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-11"&gt;&lt;/a&gt;Cloning into 'test_git'...
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-12"&gt;&lt;/a&gt;remote: Counting objects: 6, done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-13"&gt;&lt;/a&gt;remote: Compressing objects: 100% (3/3), done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-14"&gt;&lt;/a&gt;remote: Total 6 (delta 0), reused 6 (delta 0)
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-15"&gt;&lt;/a&gt;Receiving objects: 100% (6/6), done.
&lt;a name="rest_code_312ebb6a622341c292fe947208c1e712-16"&gt;&lt;/a&gt;Checking connectivity... done.
&lt;/pre&gt;&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;使用共享的 SSH 隧道 （失败）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-1"&gt;&lt;/a&gt;#mkdir ~/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-2"&gt;&lt;/a&gt;#cd ~/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-3"&gt;&lt;/a&gt;#echo '#!/bin/sh' &amp;gt; git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-4"&gt;&lt;/a&gt;#echo 'exec ssh  -o "ControlMaster no" -o "ControlPath $REPO_SSH_SOCK" "$@"' &amp;gt;&amp;gt; git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-5"&gt;&lt;/a&gt;#chmod a+x git_ssh
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-6"&gt;&lt;/a&gt;#export GIT_SSH='/home/tony_nie/work/check_git/tplink/git_ssh'
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-7"&gt;&lt;/a&gt;#export REPO_SSH_SOCK='/tmp/ssh/test_git_ssh'
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-8"&gt;&lt;/a&gt;#pwd
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-9"&gt;&lt;/a&gt;/home/tony_nie/work/check_git/tplink
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-10"&gt;&lt;/a&gt;#git clone ssh://tony@192.168.3.8:22/Users/tony/code/check_git/test_git
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-11"&gt;&lt;/a&gt;Cloning into 'test_git'...
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-12"&gt;&lt;/a&gt;bash: tony@192.168.3.8: command not found
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-13"&gt;&lt;/a&gt;fatal: Could not read from remote repository.
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-15"&gt;&lt;/a&gt;Please make sure you have the correct access rights
&lt;a name="rest_code_a5f401c451af4c609e9185eca5ccb769-16"&gt;&lt;/a&gt;and the repository exists.
&lt;/pre&gt;&lt;p&gt;执行 git clone 命令时可以看到共享隧道有 log 信息输出。&lt;/p&gt;
&lt;p&gt;正常：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-1"&gt;&lt;/a&gt;debug1: multiplexing control connection
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-2"&gt;&lt;/a&gt;debug1: channel 1: new [mux-control]
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-3"&gt;&lt;/a&gt;debug1: channel 2: new [client-session]
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-4"&gt;&lt;/a&gt;debug1: Sending environment.
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-5"&gt;&lt;/a&gt;debug1: Sending env LC_ALL = en_US.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-6"&gt;&lt;/a&gt;debug1: Sending env LANG = zh_CN.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-7"&gt;&lt;/a&gt;debug1: Sending env LC_CTYPE = en_US.UTF-8
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-8"&gt;&lt;/a&gt;debug1: Sending command: git-upload-pack '/home/tony_nie/work/test_git'
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-9"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype exit-status reply 0
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-10"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype eow@openssh.com reply 0
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-11"&gt;&lt;/a&gt;debug1: channel 2: free: client-session, nchannels 3
&lt;a name="rest_code_b939f385994d465aaa00bb26277116cc-12"&gt;&lt;/a&gt;debug1: channel 1: free: mux-control, nchannels 2
&lt;/pre&gt;&lt;p&gt;异常：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-1"&gt;&lt;/a&gt;debug1: multiplexing control connection
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-2"&gt;&lt;/a&gt;debug1: channel 1: new [mux-control]
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-3"&gt;&lt;/a&gt;debug1: channel 2: new [client-session]
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-4"&gt;&lt;/a&gt;debug1: Sending environment.
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-5"&gt;&lt;/a&gt;debug1: Sending env LC_PAPER = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-6"&gt;&lt;/a&gt;debug1: Sending env LC_ADDRESS = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-7"&gt;&lt;/a&gt;debug1: Sending env LC_MONETARY = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-8"&gt;&lt;/a&gt;debug1: Sending env LC_NUMERIC = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-9"&gt;&lt;/a&gt;debug1: Sending env LC_ALL = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-10"&gt;&lt;/a&gt;debug1: Sending env LC_TELEPHONE = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-11"&gt;&lt;/a&gt;debug1: Sending env LC_IDENTIFICATION = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-12"&gt;&lt;/a&gt;debug1: Sending env LANG = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-13"&gt;&lt;/a&gt;debug1: Sending env LC_MEASUREMENT = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-14"&gt;&lt;/a&gt;debug1: Sending env LC_CTYPE = en_US.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-15"&gt;&lt;/a&gt;debug1: Sending env LC_TIME = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-16"&gt;&lt;/a&gt;debug1: Sending env LC_NAME = zh_CN.UTF-8
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-17"&gt;&lt;/a&gt;debug1: Sending command: tony@192.168.3.8 git-upload-pack '/Users/tony/code/check_git/test_git'
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-18"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype exit-status reply 0
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-19"&gt;&lt;/a&gt;debug1: client_input_channel_req: channel 2 rtype eow@openssh.com reply 0
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-20"&gt;&lt;/a&gt;debug1: channel 2: free: client-session, nchannels 3
&lt;a name="rest_code_c8ab70722ad44749b8eca0e8d22dcbd0-21"&gt;&lt;/a&gt;debug1: channel 1: free: mux-control, nchannels 2
&lt;/pre&gt;&lt;p&gt;发现如果GIT_SSH 环境变量中如果包含 tplink 字样就会出错； 和 repo 没有关系哎。难道是
git 和 &lt;a class="reference external" href="http://www.tp-link.com/en/"&gt;TPLink&lt;/a&gt; 有过节？&lt;/p&gt;
&lt;p&gt;download git (1.9.1) 的 code 研究一下吧。&lt;/p&gt;
&lt;p&gt;现在整个工程中 grep  TPlink 字符串，没有发现；再  grep plink；咦，有发现哎。&lt;/p&gt;
&lt;p&gt;git v1.9.1
.. sourcecode:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if (protocol == PROTO_SSH) {
        const char *ssh = getenv("GIT_SSH");
        int putty = ssh &amp;amp;&amp;amp; strcasestr(ssh, "plink");
        char *ssh_host = hostandport;
        const char *port = NULL;
        get_host_and_port(&amp;amp;ssh_host, &amp;amp;port);
        port = get_port_numeric(port);

        if (!ssh) ssh = "ssh";
        *arg++ = ssh;
        if (putty &amp;amp;&amp;amp; !strcasestr(ssh, "tortoiseplink"))
                *arg++ = "-batch";
        if (port) {
                /* P is for PuTTY, p is for OpenSSH */
                *arg++ = putty ? "-P" : "-p";
                *arg++ = port;
        }
        *arg++ = ssh_host;
}
&lt;/pre&gt;
&lt;p&gt;很明显在判断 是否 putty 时，出了问题；认为GIT_SSH 环境变量出现 plink 就为 putty  :&amp;gt; &amp;lt;:&lt;/p&gt;
&lt;p&gt;git v2.5&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-1"&gt;&lt;/a&gt;ssh = getenv("GIT_SSH_COMMAND");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-2"&gt;&lt;/a&gt;if (ssh) {
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-3"&gt;&lt;/a&gt;        conn-&amp;gt;use_shell = 1;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-4"&gt;&lt;/a&gt;        putty = 0;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-5"&gt;&lt;/a&gt;} else {
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-6"&gt;&lt;/a&gt;        const char *base;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-7"&gt;&lt;/a&gt;        char *ssh_dup;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-9"&gt;&lt;/a&gt;        ssh = getenv("GIT_SSH");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-10"&gt;&lt;/a&gt;        if (!ssh)
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-11"&gt;&lt;/a&gt;        ssh = "ssh";
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-13"&gt;&lt;/a&gt;        ssh_dup = xstrdup(ssh);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-14"&gt;&lt;/a&gt;        base = basename(ssh_dup);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-16"&gt;&lt;/a&gt;        tortoiseplink = !strcasecmp(base, "tortoiseplink") ||
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-17"&gt;&lt;/a&gt;                !strcasecmp(base, "tortoiseplink.exe");
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-18"&gt;&lt;/a&gt;        putty = !strcasecmp(base, "plink") ||
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-19"&gt;&lt;/a&gt;                !strcasecmp(base, "plink.exe") || tortoiseplink;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-21"&gt;&lt;/a&gt;        free(ssh_dup);
&lt;a name="rest_code_b11acaeca60343c0ad9b7a04bb0016a3-22"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;还好 v2.5 修正了这个问题。&lt;/p&gt;
&lt;p&gt;看来不是 repo 和 TPLink 有过节，而是 git 1.9.1 和 TPLink 开了个玩笑 :)&lt;/p&gt;&lt;/div&gt;</description><category>repo</category><guid>http://blog.runxcode.com/posts/repo_vs_tplink.html</guid><pubDate>Thu, 05 Jan 2017 15:12:47 GMT</pubDate></item><item><title>从一个死锁问题说起</title><link>http://blog.runxcode.com/posts/talking-from-dead-lock.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;碰到一个死锁问题，A 进程一直持有锁。&lt;/p&gt;
&lt;p&gt;加锁和解锁代码如下：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-1"&gt;&lt;/a&gt;fd = open(PATH, O_RDRW);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-2"&gt;&lt;/a&gt;if (fd &amp;lt; 0)
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-3"&gt;&lt;/a&gt;        goto out;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-4"&gt;&lt;/a&gt;ret = flock(fd, LOCK_SH);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-5"&gt;&lt;/a&gt;if (ret &amp;lt; 0)
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-6"&gt;&lt;/a&gt;        goto out;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-8"&gt;&lt;/a&gt;/* do something */
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-10"&gt;&lt;/a&gt;out:
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-11"&gt;&lt;/a&gt;        if (fd &amp;gt; 0) {
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-12"&gt;&lt;/a&gt;                flock(fd, LOCK_UN);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-13"&gt;&lt;/a&gt;                close(fd);
&lt;a name="rest_code_a342bf649ecd46c0b1ae67b50d8a39ae-14"&gt;&lt;/a&gt;        }
&lt;/pre&gt;&lt;p&gt;追送代码发现，出现了加锁而没有释放锁的情况；唯一的可能性就是 fd &amp;gt; 0 不成立。
但加锁成功，说明 fd 不会小于 0；所以 fd == 0.&lt;/p&gt;
&lt;p&gt;为什么？ fd 是由系统调用 open 返回的，通常情况是 &amp;gt; 0 的；内核根据进程打开文件的记录返回没有使用的
值；如果 fd 为 0，说明之前 0 是空着的；但我们知道 0 通常代表着 标准输入，可能情况就是有人把标注输入
close 掉了。daemon 程序通常会将 0， 1，2 重新定向于 /dev/null, 但我们并没有这样处理。
通过 proc 文件系统查看 fd 的使用情况。&lt;/p&gt;
&lt;p&gt;正常情况：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-1"&gt;&lt;/a&gt;# ls -lh /proc/1845/fd/*
&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-2"&gt;&lt;/a&gt;lr-x------    1 root     root          64 Oct 25 17:50 1845/fd/0 -&amp;gt; /var/console
&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-3"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/1 -&amp;gt; /dev/console
&lt;a name="rest_code_a38d3e25a822468c87624e910369a65d-4"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/2 -&amp;gt; /dev/console
&lt;/pre&gt;&lt;p&gt;异常情况：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_755cb63e00284310987b304a56173740-1"&gt;&lt;/a&gt;# ls -lh /proc/1845/fd/*
&lt;a name="rest_code_755cb63e00284310987b304a56173740-2"&gt;&lt;/a&gt;lr-x------    1 root     root          64 Oct 25 17:50 1845/fd/0 -&amp;gt; /var/conf/myfile
&lt;a name="rest_code_755cb63e00284310987b304a56173740-3"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/1 -&amp;gt; /dev/console
&lt;a name="rest_code_755cb63e00284310987b304a56173740-4"&gt;&lt;/a&gt;lrwx------    1 root     root          64 Oct 25 18:49 1845/fd/2 -&amp;gt; /dev/console
&lt;/pre&gt;&lt;p&gt;很明显标准输入被 close 了，然后进程重新 open 文件时就得到了值为 0 的 fd.&lt;/p&gt;
&lt;p&gt;谁关闭了标准输入？ 为什么？&lt;/p&gt;
&lt;p&gt;有了方向很快就查到了元凶。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们知道 Linux 同时支持 POSIX 标准 和 System V 标准的 IPC 机制。 项目中使用了 Message queue 的 IPC 方法，但我们混用了两种机制；在获取 IPC handle 的时候使用了 System V 标准(msgget)；但释放 IPC handle 的时候使用了 POSIX 标准 (mq_close). 问题是 msgget 的拿到的值有很大概率为 0；mq_close(0) 会将 0 号 fd close 掉，导致 0 号 fd 重新进入了分配池。&lt;/strong&gt;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;两点结论:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;系统调用 open/create 的返回值是有可能为 0 的&lt;/li&gt;
&lt;li&gt;POSIX 标准和 System V 标准的 系统调用不能混合使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>System Call</category><category>UNIX</category><guid>http://blog.runxcode.com/posts/talking-from-dead-lock.html</guid><pubDate>Tue, 25 Oct 2016 10:28:11 GMT</pubDate></item><item><title>FAT32 文件系统时间戳问题</title><link>http://blog.runxcode.com/posts/file-time-at-fat32.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;最近遇到一个文件创建时间显示异常问题。嵌入系统中 SD 的文件系统默认选择 vfat，
就是 FAT32；在嵌入式系统中查看文件的创建时间是正常的，但如果将 SD 卡插入到 PC 机
上面，无论是 Ubuntu 还是 Windows，文件的创建时间都会显示异常，比实际创建时间早8个小时。&lt;/p&gt;
&lt;p&gt;嵌入式系统上的时区为东8区（北京时间）；其他应用获取时间和日期都正常。开始怀疑是 vfat 的问题；
但在 Ubuntu 14.04 上测试没有遇到问题。&lt;/p&gt;
&lt;p&gt;有同事反应说他们之前也碰到过类似的问题，解决办法是调用 &lt;em&gt;settimeofday&lt;/em&gt; 时提供时区参数。&lt;/p&gt;
&lt;p&gt;查阅 settimeofday 的在线手册，发现有这样一段话：&lt;/p&gt;
&lt;p&gt;Under  Linux  there are some peculiar "warp clock" semantics associated with the settimeofday() system call if on the
very first call (after booting) that has a non-NULL tz argument, the tv argument is NULL and the tz_minuteswest field
is  nonzero.   (The tz_dsttime field should be zero for this case.)  In such a case it is assumed that the CMOS clock
is on local time, and that it has to be incremented by this amount to get UTC system time.  No doubt it is a bad idea
to use this feature&lt;/p&gt;
&lt;p&gt;查看内核中关于时间的代码，发现 CMOS Clock 存储的是本地时间；而内核对此一无所知。因此需要某种手段来告知内核。内核为此还
定义了一个全局的变量 &lt;em&gt;sys_tz&lt;/em&gt; 来记录时区信息。在呼叫 &lt;em&gt;settimeofday&lt;/em&gt; 时，如果时区参数不为空，内核就会修改 &lt;em&gt;sys_tz&lt;/em&gt; 变量。&lt;/p&gt;
&lt;p&gt;因此怀疑 FAT32 中记录的文件创建时间是 locale time，不是 UTC 时间。查阅 FAT32 的代码发现，在创建文件节点时，会呼叫
&lt;em&gt;fat_time_unix2fat&lt;/em&gt; 时将 UTC 时间转换为本地时间。在转换的过程中，使用了 &lt;em&gt;sys_tz&lt;/em&gt; 保存的时区信息或者
挂载文件系统时指定的时区信息。&lt;/p&gt;
&lt;p&gt;内核也建议在系统上电之后，应尽快设置 &lt;em&gt;sys_tz&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;解决方案：系统启动后，利用 &lt;em&gt;hwclock&lt;/em&gt; 设置内核的 &lt;em&gt;sys_tz&lt;/em&gt; 变量。&lt;/p&gt;&lt;/div&gt;</description><category>File System</category><category>UNIX</category><guid>http://blog.runxcode.com/posts/file-time-at-fat32.html</guid><pubDate>Wed, 27 Jul 2016 11:56:50 GMT</pubDate></item><item><title>VirtualBox 找不到网络界面</title><link>http://blog.runxcode.com/posts/virtualbox.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;VBox 的网络模式有 N 多种，每种都有使用场景；个人比较倾向选择 Bridge 模式，好处是虚拟机在
Host 所处的局域网是真实存在的，其他机器都可以访问。但在 Bridge 模式先，如果 ethernet 没有
插入网线，Host 和 Virtual Machine 无法互相访问（host 为 Mac OS）。&lt;/p&gt;
&lt;p&gt;希望将网络模式 hostonly 也配置起来，这样在没有 ethernet 的情况下也可以 ssh 到虚拟机。但配置
网络的时候 UI 上提示没有界面可以选择。google 之，原来 hostonly 需要利用 VBoxManage 创建一个
interface 出来。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;VBoxManage hostonlyif create&lt;/li&gt;
&lt;li&gt;VBoxManage hostonlyif ipconfig vboxnet0 --ip 192.168.56.2 --netmask 255.255.255.0&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>develop tools</category><guid>http://blog.runxcode.com/posts/virtualbox.html</guid><pubDate>Fri, 01 Jul 2016 00:43:07 GMT</pubDate></item><item><title>inotify 失效问题</title><link>http://blog.runxcode.com/posts/inotify-and-sendfile.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;p&gt;inotify 子系统可以用来监视文件系统，包括文件后者目录的创建，修改，删除等等。
但如果通过 sendfile 对文件作出修改，inotify 就会监测不到对应的事件。&lt;/p&gt;</description><category>IO</category><category>UNIX</category><guid>http://blog.runxcode.com/posts/inotify-and-sendfile.html</guid><pubDate>Thu, 03 Mar 2016 13:02:16 GMT</pubDate></item><item><title>tmux 中 ssh-agent forwarding 失效问题</title><link>http://blog.runxcode.com/posts/tmux.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;作为程序员，我是比较懒的，对于重复性的劳动深恶痛绝。&lt;/p&gt;
&lt;p&gt;之前 byobu 和 screen 用的不怎么顺手，没有坚持下去；后来转向 tmux，经过一段时间的摸索，发现还是
蛮好用的。&lt;/p&gt;
&lt;p&gt;目前的工作模式使用一台 Mac book，ssh 到一台或者两台 Ubuntu 做开发工作，利用 tmux 打开好几个终端。
下班前做 tmux 的 detach 动作, 第二天上班重新 attach 上去。&lt;/p&gt;
&lt;p&gt;问题来了。重新 attach 后 ssh agent forwarding 就无法成功了，导致向 gerrit push 或者 fetch 的动作 fail；
无耐之下只能将 tmux session 解散，重新组织队伍。 这样无意义的重复劳动是不能接受的。&lt;/p&gt;
&lt;p&gt;阅读 tmux 的帮主手册； google 之，在 &lt;a class="reference external" href="http://unix.stackexchange.com/questions/75681/why-do-i-have-to-re-set-env-vars-in-tmux-when-i-re-attach"&gt;stackexchange&lt;/a&gt; 找到了解决方案，但觉得不够完美(存在安全风险)；&lt;/p&gt;
&lt;p&gt;又花了两个小时了解 ssh-agent forwarding 的原理和流程， 发现一篇好文章: &lt;a class="reference external" href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html"&gt;An_Illustrated_Guide_to_SSH_Agent_Forwarding&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;仔细阅读帮助手册，发现问题出在环境变量 SSH_AUTH_SOCK 上面。&lt;/p&gt;
&lt;p&gt;SSH_AUTH_SOCK 代表一个 unix domain socket 文件，由 sshd 创建 shell 时指定， 是 ssh-client 和 sshd 做 ssh-agent forwarding 的桥梁；shell 退出时失效； 但是 tmux 在 session 保存了该变量。
当再次 attach 时 （tmux detach, 退出 shell，登录 shell， tmux attach), tmux session 中保存的 SSH_AUTH_SOCK 还是第一次登录时 sshd 分配的，已经失效，应该使用当前登录 shell 环境变量中保存的值。&lt;/p&gt;
&lt;p&gt;但是 tmux 的 update-environment 和 set-environment 在 attach session 好像不会生效，即使重新 load 配置文件也
没有效果。暂时只能采用 &lt;a class="reference external" href="http://unix.stackexchange.com/questions/75681/why-do-i-have-to-re-set-env-vars-in-tmux-when-i-re-attach"&gt;stackexchange&lt;/a&gt; 的方案。&lt;/p&gt;&lt;/div&gt;</description><category>develop tools</category><guid>http://blog.runxcode.com/posts/tmux.html</guid><pubDate>Fri, 04 Dec 2015 15:29:38 GMT</pubDate></item><item><title>武侠小说中派，帮和教的区别</title><link>http://blog.runxcode.com/posts/wuxia.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;武侠小说会有很多帮派， 尤其是金庸的小说；帮和派， 以及教有什么区别呢？&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;派&lt;/h2&gt;
&lt;p&gt;派是以某一种或一类武功为基础而形成的组织；成员修习本组织的特色武功，比如武当派，少林派，华山派，
峨眉派, 逍遥派等等， 这些派都有独特的武功绝技， 比如武当的太极拳和太极剑， 少林的七十二绝技，
华山剑法，峨眉剑法，逍遥派的北冥神功; 总部多位于山上, 首领为掌门。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;帮&lt;/h2&gt;
&lt;p&gt;帮是以某一种谋生手段为基础为形成的组织; 成员以相同的职业为生, 比如丐帮的弟子，以乞讨为生;
盐帮，以贩卖盐为生计；帮内的成员的武功比较杂，但帮主通常具有武功绝技; 总部多位于城市或者乡镇，
首领为帮主。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;教&lt;/h2&gt;
&lt;p&gt;教是以某一种信仰而形成的组织, 成员在信仰上比较统一；比如全真教，明教等等；全真教的弟子会
修习全真教的武功，所以教全真派也说的过去；明教的弟子武功就比较杂乱，但教主具有独特的武功绝技，
九阳神功，而四大护法的武功路数完全不一样; 总部通常位于偏远的地区， 首领为教主。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;除了派、帮和教以外，还有门、镖局等等。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>杂谈</category><guid>http://blog.runxcode.com/posts/wuxia.html</guid><pubDate>Tue, 01 Dec 2015 14:32:03 GMT</pubDate></item><item><title>单元测试之 C 语言</title><link>http://blog.runxcode.com/posts/c-unit-test.html</link><dc:creator>Tony Nie</dc:creator><description>&lt;div&gt;&lt;p&gt;目前关于 C 单元测试的书籍和资料比较少， 在这里分享一下我的想法。&lt;/p&gt;
&lt;div class="section" id="static"&gt;
&lt;h2&gt;如何测试 static 函数&lt;/h2&gt;
&lt;p&gt;当产品代码和单元测试代码隔离时， 测试 static 的函数需要些技巧；有同学认为
可以不对 static 的函数不进行测试，只要对其调用者做单元测试就可以了。但对于嵌套比较
深的 static 函数来说， 测试用例不是太好构造。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;使用宏来代替 static 关键字， 根据不同的场合对宏进行赋值；&lt;/li&gt;
&lt;li&gt;在单元测试代码中 include 产品代码的源文件&lt;/li&gt;
&lt;li&gt;利用工具将待测试的产品代码源文件和单元测试源文件合并在一起生成新的文件；编译时选择新生成的文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三种方法中我比较推荐第3中方法; 好处时不影响产品代码，又可以具有较好的 coding style; 麻烦的地方在于
building 过程中定位 warning 或者 error 不是太直接。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="main"&gt;
&lt;h2&gt;如何处理 main 函数所在的文件&lt;/h2&gt;
&lt;p&gt;如果产品代码和单元测试代码是隔离开来的，通常就各自拥有自己的 main 的函数；
在 build 单元测试代码时就会出现冲突。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;修改 link 脚本， 将单元测试的入口函数指定为 unit_test_main 或者其他;&lt;/li&gt;
&lt;li&gt;利用工具将产品代码 main 函数所在的文件 copy 一份， 同时将其中的 main 函数重新命名生成新的文件；building 时选择新生成的文件;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>C/C++</category><guid>http://blog.runxcode.com/posts/c-unit-test.html</guid><pubDate>Sat, 21 Nov 2015 02:44:59 GMT</pubDate></item></channel></rss>